# -*- python -*-
# ex: set filetype=python:

import os
import uuid

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

from buildbot.plugins import worker
c['workers'] = []
c['workers'].append(
    worker.DockerLatentWorker('ubuntu-worker', 'dq9cqef23',
                              docker_host='tcp://13.59.35.72:2375',
                              image='ubuntu-worker',
                              followStartupLogs=True,
                              masterFQDN='bb04.mariadb.net',
                              volumes=['/etc/worker-share/:/mnt/worker-share']))
c['workers'].append(
    worker.DockerLatentWorker('centos-worker', 'f02428f2r2',
                              docker_host='tcp://13.58.87.208:2375',
                              image='centos-worker',
                              followStartupLogs=True,
                              masterFQDN='bb04.mariadb.net',
                              volumes=['/etc/worker-share/:/mnt/worker-share']))
c['workers'].append(
    worker.DockerLatentWorker('debian-worker', 'gef83223o',
                              docker_host='tcp://13.59.35.72:2375',
                              image='debian-worker',
                              followStartupLogs=True,
                              masterFQDN='bb04.mariadb.net',
                              volumes=['/etc/worker-share/:/mnt/worker-share']))

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/MariaDB/server.git',
        workdir='gitpoller-workdir', branches=['10.3'],
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='10.3'),
                            treeStableTimer=None,
                            builderNames=["mariadb-ubuntu",
                                "mariadb-centos",
                                "mariadb-debian"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["mariadb-ubuntu",
                                "mariadb-centos",
                                "mariadb-debian"]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
factory.addStep(steps.Git(repourl='http://github.com/MariaDB/server.git', mode='incremental'))
factory.addStep(steps.ShellCommand(command=["cmake", "-DCMAKE_BUILD_TYPE=Debug", "."], workdir="build"))
factory.addStep(steps.ShellCommand(command=["cmake", "--build", "."], workdir="build"))
factory.addStep(steps.ShellCommand(command=["perl", "mysql-test-run.pl", "--parallel=1", "--debug", "--retry=3", "--retry-failure=10"], workdir="build/mysql-test")) # --fast, --reorder
unique_log_storage = os.path.join("/mnt/worker-share", str(uuid.uuid4()))
factory.addStep(steps.MakeDirectory(dir=unique_log_storage, alwaysRun=True))
factory.addStep(steps.CopyDirectory(src="build/mysql-test/var/log", dest=unique_log_storage, alwaysRun=True))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="mariadb-ubuntu",
      workernames=["ubuntu-worker"],
      factory=factory))
c['builders'].append(
    util.BuilderConfig(name="mariadb-centos",
      workernames=["centos-worker"],
      factory=factory))
c['builders'].append(
    util.BuilderConfig(name="mariadb-debian",
      workernames=["debian-worker"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "MariaDB Buildbot Proto"
c['titleURL'] = "https://mariadb.com/products/technology/server"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://bb04.mariadb.net:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
